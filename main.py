# from fastapi import FastAPI, HTTPException
# from pydantic import BaseModel
# import os
# from langchain_google_genai import ChatGoogleGenerativeAI
# from langchain_community.document_loaders import TextLoader
# from langchain_google_genai import GoogleGenerativeAIEmbeddings
# from dotenv import load_dotenv
# import mimetypes
# import re
# from langchain_openai import ChatOpenAI
# from langchain_openai import OpenAIEmbeddings

# # Load environment variables
# load_dotenv()
# app = FastAPI()



# llm = ChatOpenAI(
#     model="gpt-4o",
#     temperature=0,
#     max_tokens=None,
#     timeout=None,
#     max_retries=2,
# )

# embeddings = OpenAIEmbeddings(
#     model="text-embedding-3-large",
# )
# # C·∫•u h√¨nh Gemini API
# # llm = ChatGoogleGenerativeAI(
# #     model="gemini-1.5-pro",
# #     temperature=0,
# #     max_tokens=None,
# #     timeout=None,
# #     max_retries=2,
# # )

# # embeddings = GoogleGenerativeAIEmbeddings(model="models/text-embedding-004")

# # ƒê·ªãnh nghƒ©a schema ƒë·∫ßu v√†o
# class CodeRequest(BaseModel):
#     input: str
#     directory_address: str

# def extract_code_from_response(response):
#     content = response.content if hasattr(response, "content") else ""
#     match = re.search(r"```[a-zA-Z]*\n([\s\S]*?)\n```", content)
#     return match.group(1).strip() if match else content.strip()

# def write_code_to_file(directory_address: str, content: str):
#     os.makedirs(os.path.dirname(directory_address), exist_ok=True)
    
#     # Ghi ƒë√® n·ªôi dung m·ªõi tr·ª±c ti·∫øp v√†o file
#     with open(directory_address, "w", encoding="utf-8") as file:
#         file.write(content)

# def get_root_directory(directory_address: str):
#     # T√°ch c√°c ph·∫ßn c·ªßa ƒë∆∞·ªùng d·∫´n
#     path_parts = directory_address.split('/')
#     # L·∫•y ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n l√†m th∆∞ m·ª•c g·ªëc (n·∫øu c√≥ nhi·ªÅu h∆°n 1 ph·∫ßn)
#     return path_parts[0] if len(path_parts) > 1 else os.path.dirname(directory_address)

# def get_directory_content(directory_address: str):
#     # L·∫•y th∆∞ m·ª•c g·ªëc t·ª´ directory_address
#     root_dir = get_root_directory(directory_address)
    
#     if not os.path.exists(root_dir):
#         os.makedirs(root_dir)
#         return "No existing files found in directory"

#     file_contents = []
#     for root, dirs, files in os.walk(root_dir):
#         if "node_modules" in root:  # B·ªè qua th∆∞ m·ª•c node_modules
#             continue
#         for file in files:
#             file_path = os.path.join(root, file)
#             mime_type, _ = mimetypes.guess_type(file_path)
#             # Ch·ªâ ƒë·ªçc c√°c file text c√≥ ph·∫ßn m·ªü r·ªông ph·ªï bi·∫øn
#             if (mime_type and mime_type.startswith("text")) or file.endswith((".ts", ".js", ".json", ".txt")):
#                 try:
#                     with open(file_path, "r", encoding="utf-8") as f:
#                         content = f.read()
#                         # Ghi r√µ t√™n file v√† n·ªôi dung ƒë·ªÉ d·ªÖ theo d√µi
#                         file_contents.append(f"File: {file_path}\n{content}\n{'='*50}")
#                 except Exception as e:
#                     file_contents.append(f"Error reading {file_path}: {str(e)}\n{'='*50}")
    
#     if not file_contents:
#         return "No readable text files found in directory"
    
#     return "\n".join(file_contents)

# @app.post("/generate-code")
# def generate_code(request: CodeRequest):
#     try:
#         # L·∫•y th∆∞ m·ª•c g·ªëc t·ª´ directory_address 
#         root_directory = get_root_directory(request.directory_address)
        
#         # L·∫•y t·∫•t c·∫£ n·ªôi dung trong th∆∞ m·ª•c g·ªëc
#         context = get_directory_content(request.directory_address)
#         print(context)
#         # T·∫°o prompt v·ªõi y√™u c·∫ßu th√™m route /hi
#         prompt = f"""
#         B·∫°n l√† m·ªôt tr·ª£ l√Ω l·∫≠p tr√¨nh AI chuy√™n t·∫°o m√£ ngu·ªìn.
#         B·∫°n ph·∫£i vi·∫øt full 1 file code.

#         üìÇ **Th∆∞ m·ª•c g·ªëc:** `{root_directory}`
        
#         üîç **N·ªôi dung c√°c file trong th∆∞ m·ª•c g·ªëc:**
#         {context}

#         üìù **Y√™u c·∫ßu t·ª´ ng∆∞·ªùi d√πng:**
#         {request.input}

#         üéØ **Nhi·ªám v·ª•:**
#         - Ch·ªâ tr·∫£ v·ªÅ code, kh√¥ng th√™m gi·∫£i th√≠ch
        
#         ƒê·∫£m b·∫£o r·∫±ng code c√≥ th·ªÉ ch·∫°y ƒë∆∞·ª£c.
#         Ch·∫Øc ch·∫Øn r·∫±ng import ƒë√£ ƒë√∫ng.
#         T√¥i nh·∫≠n th·∫•y b·∫°n th∆∞·ªùng import sai.

#         H√£y t·∫°o m√£ ngu·ªìn ph√π h·ª£p.
#         """

#         # G·ªçi LLM ƒë·ªÉ t·∫°o code
#         response = llm.invoke(prompt)
#         code_content = extract_code_from_response(response)

#         # Th√™m code v√†o file ƒë√≠ch
#         write_code_to_file(request.directory_address, code_content)

#         # Ch·ªâ tr·∫£ v·ªÅ code trong response
#         return code_content
#     except Exception as e:
#         raise HTTPException(status_code=500, detail=str(e))
    
    
    
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import os
import re
import mimetypes
from langchain_google_genai import ChatGoogleGenerativeAI, GoogleGenerativeAIEmbeddings
from dotenv import load_dotenv

# # Load environment variables
load_dotenv()

app = FastAPI()

# C·∫•u h√¨nh LLM (c√≥ th·ªÉ ch·ªçn GPT-4o ho·∫∑c Gemini)
llm = ChatGoogleGenerativeAI(
    model="gemini-1.5-pro",
    temperature=0,
    max_tokens=None,
    timeout=None,
    max_retries=2,
)

embeddings = GoogleGenerativeAIEmbeddings(model="models/text-embedding-004")

# ƒê·ªãnh nghƒ©a schema ƒë·∫ßu v√†o
class CodeRequest(BaseModel):
    input: str
    root_directory: str
    directory_address: str

# H√†m tr√≠ch xu·∫•t code t·ª´ ph·∫£n h·ªìi c·ªßa AI
def extract_code_from_response(response):
    content = response.content if hasattr(response, "content") else ""
    match = re.search(r"```[a-zA-Z]*\n([\s\S]*?)\n```", content)
    return match.group(1).strip() if match else content.strip()

# H√†m ghi code v√†o file
def write_code_to_file(directory_address: str, content: str):
    os.makedirs(os.path.dirname(directory_address), exist_ok=True)
    with open(directory_address, "w", encoding="utf-8") as file:
        file.write(content)
        
def get_root_directory(directory_address: str):
    # T√°ch c√°c ph·∫ßn c·ªßa ƒë∆∞·ªùng d·∫´n
    path_parts = directory_address.split(os.sep)
    # path_parts = directory_address.split('/')
    # L·∫•y ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n l√†m th∆∞ m·ª•c g·ªëc (n·∫øu c√≥ nhi·ªÅu h∆°n 1 ph·∫ßn)
    return path_parts[0] if len(path_parts) > 1 else os.path.dirname(directory_address)

# L∆∞u tr·ªØ n·ªôi dung th∆∞ m·ª•c v√†o cache ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
def get_directory_content(root_directory: str):
    if not os.path.exists(root_directory):
        return "No existing files found in directory"

    file_contents = []
    for root, _, files in os.walk(root_directory):
        if "node_modules" in root:
            continue
        for file in files:
            file_path = os.path.join(root, file)
            mime_type, _ = mimetypes.guess_type(file_path)
            if (mime_type and mime_type.startswith("text")) or file.endswith((".ts", ".js", ".json", ".txt")):
                try:
                    with open(file_path, "r", encoding="utf-8") as f:
                        content = f.read()
                        file_contents.append(f"File: {file_path}\n{content[:500]}...\n{'='*50}")  # Ch·ªâ l·∫•y 500 k√Ω t·ª± ƒë·∫ßu ti√™n
                except Exception as e:
                    file_contents.append(f"Error reading {file_path}: {str(e)}\n{'='*50}")
    
    return "\n".join(file_contents) if file_contents else "No readable text files found in directory"

@app.post("/generate-code")
def generate_code(request: CodeRequest):
    try:
        root_directory = request.root_directory
        print('root_directory', root_directory)
        context = get_directory_content(root_directory)
        
        print('context', context)
        
        prompt = f"""
        B·∫°n l√† m·ªôt tr·ª£ l√Ω l·∫≠p tr√¨nh AI chuy√™n t·∫°o m√£ ngu·ªìn.
        Nhi·ªám v·ª• c·ªßa b·∫°n l√† d·ª±a v√†o c√°c file trong folder ƒë·ªÉ c√≥ th·ªÉ t·∫°o ra m·ªôt api ph√π h·ª£p v·ªõi y√™u c·∫ßu t·ª´ ng∆∞·ªùi d√πng.
        Xem k·ªπ template c·ªßa file t√¥i ch·ªâ ƒë·ªãnh v√† th√™m code v√†o.

        üìÇ **Th∆∞ m·ª•c g·ªëc:** `{root_directory}`
        
        **Thu m·ª•c c·∫ßn thay ƒë·ªïi:** `{request.directory_address}`        
        üîç **N·ªôi dung quan tr·ªçng t·ª´ c√°c file trong th∆∞ m·ª•c g·ªëc:**
        {context}
        
        üìù **Y√™u c·∫ßu t·ª´ ng∆∞·ªùi d√πng:**
        {request.input}
        
        üéØ **Nhi·ªám v·ª•:**
        - Ch·ªâ tr·∫£ v·ªÅ code, kh√¥ng th√™m gi·∫£i th√≠ch.
        - ƒê·∫£m b·∫£o import ch√≠nh x√°c.
        - Code ph·∫£i ch·∫°y ƒë∆∞·ª£c m√† kh√¥ng c√≥ l·ªói.
        """
        
        response = llm.invoke(prompt)
        code_content = extract_code_from_response(response)
        write_code_to_file(request.directory_address, code_content)
        
        return {"message": "Code generated successfully", "file": request.directory_address, "code": code_content}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))






# from langchain_community.vectorstores import FAISS
# from langchain_core.documents import Document
# from langchain_text_splitters import RecursiveCharacterTextSplitter
# import pickle

# # Kh·ªüi t·∫°o vector store FAISS
# vector_store_path = "faiss_index"

# def save_documents_to_vectorstore(root_directory):
#     """ L∆∞u tr·ªØ n·ªôi dung th∆∞ m·ª•c d∆∞·ªõi d·∫°ng embedding v√†o FAISS """
#     if not os.path.exists(root_directory):
#         return None
    
#     documents = []
#     for root, _, files in os.walk(root_directory):
#         if "node_modules" in root:
#             continue
#         for file in files:
#             file_path = os.path.join(root, file)
#             mime_type, _ = mimetypes.guess_type(file_path)
#             if (mime_type and mime_type.startswith("text")) or file.endswith((".ts", ".js", ".json", ".txt")):
#                 try:
#                     with open(file_path, "r", encoding="utf-8") as f:
#                         content = f.read()
#                         doc = Document(page_content=content, metadata={"source": file_path})
#                         documents.append(doc)
#                 except Exception:
#                     continue
    
#     text_splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=50)
#     split_docs = text_splitter.split_documents(documents)
    
#     vector_store = FAISS.from_documents(split_docs, embeddings)
#     with open(vector_store_path, "wb") as f:
#         pickle.dump(vector_store, f)

#     return "Vector store updated successfully"

# def retrieve_relevant_docs(query, top_k=3):
#     """ T√¨m ki·∫øm t√†i li·ªáu li√™n quan ƒë·∫øn y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng """
#     try:
#         with open(vector_store_path, "rb") as f:
#             vector_store = pickle.load(f)
#     except FileNotFoundError:
#         return "No vector database found. Please update the index first."
    
#     results = vector_store.similarity_search(query, k=top_k)
#     return "\n".join([f"üîπ **{doc.metadata['source']}**\n{doc.page_content[:500]}..." for doc in results])

# @app.post("/generate-code")
# def generate_code(request: CodeRequest):
#     try:
#         root_directory = get_root_directory(request.directory_address)
#         print('root_directory', root_directory)
#         # C·∫≠p nh·∫≠t index tr∆∞·ªõc khi truy v·∫•n
#         save_documents_to_vectorstore(root_directory)
        
#         # L·∫•y th√¥ng tin quan tr·ªçng t·ª´ th∆∞ m·ª•c b·∫±ng RAG
#         context = retrieve_relevant_docs(request.input)
        
#         prompt = f"""
#         B·∫°n l√† m·ªôt tr·ª£ l√Ω l·∫≠p tr√¨nh AI chuy√™n t·∫°o m√£ ngu·ªìn.
#         B·∫°n ph·∫£i vi·∫øt to√†n b·ªô file code.

#         üìÇ **Th∆∞ m·ª•c g·ªëc:** `{root_directory}`
#         **Thu m·ª•c c·∫ßn thay ƒë·ªïi:** `{request.directory_address}`        
        
#         üîç **C√°c t√†i li·ªáu li√™n quan t·ª´ th∆∞ m·ª•c:** 
#         {context}

#         üìù **Y√™u c·∫ßu t·ª´ ng∆∞·ªùi d√πng:**
#         {request.input}
        
#         üéØ **Nhi·ªám v·ª•:**
#         - Ch·ªâ tr·∫£ v·ªÅ code, kh√¥ng th√™m gi·∫£i th√≠ch.
#         - ƒê·∫£m b·∫£o import ch√≠nh x√°c.
#         - Code ph·∫£i ch·∫°y ƒë∆∞·ª£c m√† kh√¥ng c√≥ l·ªói.
#         """
        
#         response = llm.invoke(prompt)
#         code_content = extract_code_from_response(response)
#         write_code_to_file(request.directory_address, code_content)
        
#         return {"message": "Code generated successfully", "file": request.directory_address, "code": code_content}
#     except Exception as e:
#         raise HTTPException(status_code=500, detail=str(e))
